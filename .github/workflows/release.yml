name: Build and Release FeatherCapeJump

on:
  push:
    branches:
      - master # Triggers on pushes to the master branch
    # tags:
    #  - 'v*' # Temporarily disabled, will be re-enabled later

jobs:
  build:
    name: Build .NET Project
    runs-on: windows-latest # Using windows-latest as it's a .NET Framework project
    permissions:
      contents: read # To checkout the code
    outputs: # Define outputs for the build job
      informational_version: ${{ steps.get_version.outputs.informational_version }}
      release_tag: ${{ steps.get_version.outputs.release_tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          # Using .NET SDK 7.x which supports .NET Framework 4.7.2
          dotnet-version: '7.0.x'

      - name: Prepare Build Libraries from _GameOriginalLibs
        shell: powershell
        run: |
          $sourceDir = "${{ github.workspace }}/_GameOriginalLibs"
          $destinationDir = "${{ github.workspace }}/BuildReferencedLibs"
          Write-Host "Source for DLLs: $sourceDir"
          Write-Host "Destination for build DLLs: $destinationDir"
          if (Test-Path $sourceDir) {
            New-Item -ItemType Directory -Force -Path $destinationDir
            Copy-Item -Path "$sourceDir/*" -Destination $destinationDir -Force -Recurse
            Write-Host "Copied DLLs from $sourceDir to $destinationDir"
          } else {
            Write-Error "_GameOriginalLibs folder not found. Please create it in your repository and commit the necessary game/modding DLLs there."
            exit 1
          }
        working-directory: '${{ github.workspace }}'

      - name: Restore dependencies
        run: dotnet restore FeatherCapeJump.sln
        working-directory: '${{ github.workspace }}'

      - name: Get version
        id: get_version
        shell: powershell
        run: |
          $class1Path = "${{ github.workspace }}/Class1.cs"
          
          if (-not (Test-Path $class1Path)) {
            Write-Error "ERROR: Class1.cs not found at $class1Path."
            Write-Error "Workspace contents: $(Get-ChildItem -Path ${{ github.workspace }} | ForEach-Object { $_.Name }) -join ', '"
            exit 1
          }
          
          $fileContent = Get-Content $class1Path -Raw -Encoding UTF8
          # Regex to match 'private const string ModVersion = "VERSION_STRING";' allowing for variations in spacing
          $regexPattern = 'private\\s+const\\s+string\\s+ModVersion\\s*=\\s*\\"([^\\"]+)\\"'
          $match = [regex]::Match($fileContent, $regexPattern)

          if ($match.Success) {
            $VERSION_FROM_FILE = $match.Groups[1].Value
            Write-Host "Successfully extracted version from Class1.cs: $VERSION_FROM_FILE"
          } else {
            Write-Error "ERROR: Could not extract ModVersion from Class1.cs using regex."
            Write-Error "Regex used: $regexPattern"
            $relevantLines = Get-Content $class1Path -Encoding UTF8 | Where-Object { $_ -match "ModVersion" }
            if ($relevantLines) {
              Write-Error "Relevant line(s) from Class1.cs containing 'ModVersion':"
              $relevantLines | ForEach-Object { Write-Error "- $_" }
            } else {
              Write-Error "No lines containing 'ModVersion' found in Class1.cs."
            }
            Write-Error "--- Entire content of Class1.cs (as seen by the script) START ---"
            Write-Host ($fileContent | Out-String) # Using Write-Host to avoid it being treated as an error
            Write-Error "--- Entire content of Class1.cs (as seen by the script) END ---"
            exit 1 # Fail the build if version cannot be extracted
          }

          $INFORMATIONAL_VERSION = $VERSION_FROM_FILE
          $ASSEMBLY_FILE_VERSION = $VERSION_FROM_FILE # Initial value

          # Ensure AssemblyVersion/FileVersion has at least major.minor.build.revision, pad with .0 if needed
          $VERSION_PARTS = $INFORMATIONAL_VERSION.Split('.')
          # Remove any pre-release suffix for AssemblyVersion/FileVersion (e.g. -beta, -dev-sha)
          if ($VERSION_PARTS[-1].Contains("-")) {
            $tempVersion = $VERSION_PARTS[-1].Split('-')[0]
            $VERSION_PARTS = $VERSION_PARTS[0..($VERSION_PARTS.Length-2)] + $tempVersion
          }
          
          if($VERSION_PARTS.Length -eq 1) { $ASSEMBLY_FILE_VERSION = "$($VERSION_PARTS[0]).0.0.0" }
          elseif($VERSION_PARTS.Length -eq 2) { $ASSEMBLY_FILE_VERSION = "$($VERSION_PARTS[0]).$($VERSION_PARTS[1]).0.0" }
          elseif($VERSION_PARTS.Length -eq 3) { $ASSEMBLY_FILE_VERSION = "$($VERSION_PARTS[0]).$($VERSION_PARTS[1]).$($VERSION_PARTS[2]).0" }
          elseif($VERSION_PARTS.Length -ge 4) { $ASSEMBLY_FILE_VERSION = ($VERSION_PARTS | Select-Object -First 4) -join '.' }
          else { $ASSEMBLY_FILE_VERSION = "0.0.0.0" } # Fallback if parsing fails unexpectedly

          Write-Host "Using InformationalVersion: $INFORMATIONAL_VERSION"
          Write-Host "Using AssemblyFileVersion: $ASSEMBLY_FILE_VERSION"
          echo "informational_version=$INFORMATIONAL_VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          echo "assembly_file_version=$ASSEMBLY_FILE_VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          # Ensure release_tag starts with 'v' for consistency with common tagging practices
          if ($INFORMATIONAL_VERSION.StartsWith("v")) {
            echo "release_tag=$INFORMATIONAL_VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          } else {
            echo "release_tag=v$INFORMATIONAL_VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          }

      - name: Build project
        run: >
          dotnet build FeatherCapeJump.sln --configuration Release --no-restore
          /p:Version=${{ steps.get_version.outputs.informational_version }}
          /p:AssemblyVersion=${{ steps.get_version.outputs.assembly_file_version }}
          /p:FileVersion=${{ steps.get_version.outputs.assembly_file_version }}
        working-directory: '${{ github.workspace }}'
        shell: powershell

      - name: Upload DLL artifact
        uses: actions/upload-artifact@v4
        with:
          name: FeatherCapeJump-dll
          # Path to the DLL. Based on your structure, it's under net472 for Release.
          path: '${{ github.workspace }}/bin/Release/net472/FeatherCapeJump.dll'

  create_release:
    name: Create GitHub Release
    needs: build # Depends on the build job
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download DLL artifact
        uses: actions/download-artifact@v4
        with:
          name: FeatherCapeJump-dll
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build.outputs.release_tag }}
          name: ${{ format('Release {0}', needs.build.outputs.release_tag) }}
          body: |
            Automated release.
            ${{ github.ref_type == 'branch' && format('Commit: {0}', github.sha) || '' }}
            The `FeatherCapeJump.dll` is attached below.

            **Changelog:**
            *(For tagged releases, consider maintaining a CHANGELOG.md file and linking it here, or list changes manually.)*
          draft: false
          # Mark as pre-release if the informational_version (extracted from file) contains a hyphen
          prerelease: ${{ contains(needs.build.outputs.informational_version, '-') }}
          files: |
            artifacts/FeatherCapeJump.dll
