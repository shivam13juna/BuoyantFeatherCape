name: Build and Release FeatherCapeJump

on:
  push:
    branches:
      - master # Triggers on pushes to the master branch
    # tags:
    #  - 'v*' # Temporarily disabled, will be re-enabled later

jobs:
  build:
    name: Build .NET Project
    runs-on: windows-latest # Using windows-latest as it's a .NET Framework project
    permissions:
      contents: read # To checkout the code

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          # Using .NET SDK 7.x which supports .NET Framework 4.7.2
          dotnet-version: '7.0.x'

      - name: Prepare Build Libraries from _GameOriginalLibs
        shell: powershell
        run: |
          $sourceDir = "${{ github.workspace }}/_GameOriginalLibs"
          $destinationDir = "${{ github.workspace }}/BuildReferencedLibs"
          Write-Host "Source for DLLs: $sourceDir"
          Write-Host "Destination for build DLLs: $destinationDir"
          if (Test-Path $sourceDir) {
            New-Item -ItemType Directory -Force -Path $destinationDir
            Copy-Item -Path "$sourceDir/*" -Destination $destinationDir -Force -Recurse
            Write-Host "Copied DLLs from $sourceDir to $destinationDir"
          } else {
            Write-Error "_GameOriginalLibs folder not found. Please create it in your repository and commit the necessary game/modding DLLs there."
            exit 1
          }
        working-directory: '${{ github.workspace }}'

      - name: Restore dependencies
        run: dotnet restore FeatherCapeJump.sln
        working-directory: '${{ github.workspace }}'

      - name: Get version
        id: get_version
        run: |
          if ("${{ github.ref_type }}" -eq "tag") {
            $REF_NAME = "${{ github.ref_name }}"
            if ($REF_NAME.StartsWith("v")) {
              $VERSION_STRING = $REF_NAME.Substring(1) # e.g., 1.0.0
            } else {
              $VERSION_STRING = $REF_NAME # e.g., 1.0.0
            }
            $INFORMATIONAL_VERSION = $VERSION_STRING
            # For tags, ensure AssemblyVersion has at least major.minor.build.revision, pad with .0 if needed
            $VERSION_PARTS = $VERSION_STRING.Split('.')
            # Ensure we have at least major and minor. Pad build and revision if not present.
            if($VERSION_PARTS.Length -eq 1) { $VERSION_PARTS += "0"; $VERSION_PARTS += "0"; $VERSION_PARTS += "0" } # e.g. 1 -> 1.0.0.0
            elseif($VERSION_PARTS.Length -eq 2) { $VERSION_PARTS += "0"; $VERSION_PARTS += "0" } # e.g. 1.0 -> 1.0.0.0
            elseif($VERSION_PARTS.Length -eq 3) { $VERSION_PARTS += "0" } # e.g. 1.0.0 -> 1.0.0.0
            # If more than 4 parts, truncate to 4 for AssemblyVersion
            $ASSEMBLY_FILE_VERSION = ($VERSION_PARTS | Select-Object -First 4) -join '.'
          } else {
            # For non-tag pushes (e.g., to master)
            $SHORT_SHA = "${{ github.sha }}".Substring(0, 7)
            $INFORMATIONAL_VERSION = "0.0.0-dev-$SHORT_SHA"
            $ASSEMBLY_FILE_VERSION = "0.0.0.0" # Strict x.x.x.x format for AssemblyVersion/FileVersion
          }
          Write-Host "Detected InformationalVersion: $INFORMATIONAL_VERSION"
          Write-Host "Detected AssemblyFileVersion: $ASSEMBLY_FILE_VERSION"
          echo "informational_version=$INFORMATIONAL_VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          echo "assembly_file_version=$ASSEMBLY_FILE_VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        shell: powershell

      - name: Build project
        run: >
          dotnet build FeatherCapeJump.sln --configuration Release --no-restore
          /p:Version=${{ steps.get_version.outputs.informational_version }}
          /p:AssemblyVersion=${{ steps.get_version.outputs.assembly_file_version }}
          /p:FileVersion=${{ steps.get_version.outputs.assembly_file_version }}
        working-directory: '${{ github.workspace }}'
        shell: powershell

      - name: Upload DLL artifact
        uses: actions/upload-artifact@v4
        with:
          name: FeatherCapeJump-dll
          # Path to the DLL. Based on your structure, it's under net472 for Release.
          path: '${{ github.workspace }}/bin/Release/net472/FeatherCapeJump.dll'

  create_release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download DLL artifact
        uses: actions/download-artifact@v4
        with:
          name: FeatherCapeJump-dll
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          # For master pushes, create a unique tag like dev-<sha>
          # For actual git tags (e.g., v1.0.0), use the git tag name.
          tag_name: ${{ github.ref_type == 'tag' && github.ref_name || format('dev-{0}', github.sha) }}
          name: ${{ github.ref_type == 'tag' && format('Release {0}', github.ref_name) || format('Development Build {0}', github.sha) }}
          body: |
            Automated release.
            ${{ github.ref_type == 'branch' && format('Commit: {0}', github.sha) || '' }}
            The `FeatherCapeJump.dll` is attached below.

            **Changelog:**
            *(For tagged releases, consider maintaining a CHANGELOG.md file and linking it here, or list changes manually.)*
          draft: false
          # Mark releases from master as pre-releases
          # Mark tagged releases as pre-releases if the tag contains a hyphen (e.g., v1.0.0-beta)
          prerelease: ${{ github.ref_type == 'branch' || contains(github.ref_name, '-') }}
          files: |
            artifacts/FeatherCapeJump.dll
