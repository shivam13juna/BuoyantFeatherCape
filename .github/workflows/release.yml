name: Build and Release FeatherCapeJump

on:
  push:
    branches:
      - master # Triggers on pushes to the master branch
    # tags:
    #  - 'v*' # Temporarily disabled, will be re-enabled later

jobs:
  # New job to extract version on Ubuntu
  extract_version:
    name: Extract Version
    runs-on: ubuntu-latest
    outputs:
      informational_version: ${{ steps.extract.outputs.informational_version }}
      assembly_file_version: ${{ steps.extract.outputs.assembly_file_version }}
      release_tag: ${{ steps.extract.outputs.release_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Extract version
        id: extract
        shell: bash
        run: |
          version=$(grep -Po 'private const string ModVersion = "\K[^\"]+' Class1.cs)
          echo "informational_version=$version" >> $GITHUB_OUTPUT
          # build assembly file version
          IFS='.' read -ra parts <<< "$version"
          last=${parts[-1]%%-*}; parts[-1]=$last
          while [ ${#parts[@]} -lt 4 ]; do parts+=(0); done
          assembly_version="${parts[0]}.${parts[1]}.${parts[2]}.${parts[3]}"
          echo "assembly_file_version=$assembly_version" >> $GITHUB_OUTPUT
          tag=${version}
          [[ $tag != v* ]] && tag="v$tag"
          echo "release_tag=$tag" >> $GITHUB_OUTPUT

  build:
    name: Build .NET Project
    needs: extract_version            # Depend on version extraction
    runs-on: windows-latest
    permissions:
      contents: read # To checkout the code

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          # Using .NET SDK 7.x which supports .NET Framework 4.7.2
          dotnet-version: '7.0.x'

      - name: Prepare Build Libraries from _GameOriginalLibs
        shell: powershell
        run: |
          $sourceDir = "${{ github.workspace }}/_GameOriginalLibs"
          $destinationDir = "${{ github.workspace }}/BuildReferencedLibs"
          Write-Host "Source for DLLs: $sourceDir"
          Write-Host "Destination for build DLLs: $destinationDir"
          if (Test-Path $sourceDir) {
            New-Item -ItemType Directory -Force -Path $destinationDir
            Copy-Item -Path "$sourceDir/*" -Destination $destinationDir -Force -Recurse
            Write-Host "Copied DLLs from $sourceDir to $destinationDir"
          } else {
            Write-Error "_GameOriginalLibs folder not found. Please create it in your repository and commit the necessary game/modding DLLs there."
            exit 1
          }
        working-directory: '${{ github.workspace }}'

      - name: Restore dependencies
        run: dotnet restore FeatherCapeJump.sln
        working-directory: '${{ github.workspace }}'

      - name: Build project
        run: |
          dotnet build FeatherCapeJump.sln --configuration Release --no-restore \
            /p:Version=${{ needs.extract_version.outputs.informational_version }} \
            /p:AssemblyVersion=${{ needs.extract_version.outputs.assembly_file_version }} \
            /p:FileVersion=${{ needs.extract_version.outputs.assembly_file_version }}
        working-directory: '${{ github.workspace }}'
        shell: powershell

      - name: Upload DLL artifact
        uses: actions/upload-artifact@v4
        with:
          name: FeatherCapeJump-dll
          # Path to the DLL. Based on your structure, it's under net472 for Release.
          path: '${{ github.workspace }}/bin/Release/net472/FeatherCapeJump.dll'

  create_release:
    name: Create GitHub Release
    needs: [extract_version, build]   # Use outputs from extract_version
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download DLL artifact
        uses: actions/download-artifact@v4
        with:
          name: FeatherCapeJump-dll
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.extract_version.outputs.release_tag }}
          name: ${{ format('Release {0}', needs.extract_version.outputs.release_tag) }}
          body: |
            Automated release for version ${{ needs.extract_version.outputs.informational_version }}.
          draft: false
          # Mark as pre-release if the informational_version (extracted from file) contains a hyphen
          prerelease: ${{ contains(needs.extract_version.outputs.informational_version, '-') }}
          files: |
            artifacts/FeatherCapeJump.dll
